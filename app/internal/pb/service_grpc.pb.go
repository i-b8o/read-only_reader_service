// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReadOnlyRegulationGRPCClient is the client API for ReadOnlyRegulationGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadOnlyRegulationGRPCClient interface {
	GetRegulation(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Regulation, error)
	GetChapter(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Chapter, error)
	GetAllChapters(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Chapters, error)
	GetParagraphs(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Paragraphs, error)
	Search(ctx context.Context, in *SearchRequestMessage, opts ...grpc.CallOption) (*SearchResponseMessage, error)
	SearchRegulations(ctx context.Context, in *SearchRequestMessage, opts ...grpc.CallOption) (*SearchResponseMessage, error)
	SearchChapters(ctx context.Context, in *SearchRequestMessage, opts ...grpc.CallOption) (*SearchResponseMessage, error)
	SearchPargaraphs(ctx context.Context, in *SearchRequestMessage, opts ...grpc.CallOption) (*SearchResponseMessage, error)
}

type readOnlyRegulationGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewReadOnlyRegulationGRPCClient(cc grpc.ClientConnInterface) ReadOnlyRegulationGRPCClient {
	return &readOnlyRegulationGRPCClient{cc}
}

func (c *readOnlyRegulationGRPCClient) GetRegulation(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Regulation, error) {
	out := new(Regulation)
	err := c.cc.Invoke(ctx, "/ReadOnlyRegulationGRPC/GetRegulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readOnlyRegulationGRPCClient) GetChapter(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Chapter, error) {
	out := new(Chapter)
	err := c.cc.Invoke(ctx, "/ReadOnlyRegulationGRPC/GetChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readOnlyRegulationGRPCClient) GetAllChapters(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Chapters, error) {
	out := new(Chapters)
	err := c.cc.Invoke(ctx, "/ReadOnlyRegulationGRPC/GetAllChapters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readOnlyRegulationGRPCClient) GetParagraphs(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Paragraphs, error) {
	out := new(Paragraphs)
	err := c.cc.Invoke(ctx, "/ReadOnlyRegulationGRPC/GetParagraphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readOnlyRegulationGRPCClient) Search(ctx context.Context, in *SearchRequestMessage, opts ...grpc.CallOption) (*SearchResponseMessage, error) {
	out := new(SearchResponseMessage)
	err := c.cc.Invoke(ctx, "/ReadOnlyRegulationGRPC/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readOnlyRegulationGRPCClient) SearchRegulations(ctx context.Context, in *SearchRequestMessage, opts ...grpc.CallOption) (*SearchResponseMessage, error) {
	out := new(SearchResponseMessage)
	err := c.cc.Invoke(ctx, "/ReadOnlyRegulationGRPC/SearchRegulations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readOnlyRegulationGRPCClient) SearchChapters(ctx context.Context, in *SearchRequestMessage, opts ...grpc.CallOption) (*SearchResponseMessage, error) {
	out := new(SearchResponseMessage)
	err := c.cc.Invoke(ctx, "/ReadOnlyRegulationGRPC/SearchChapters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readOnlyRegulationGRPCClient) SearchPargaraphs(ctx context.Context, in *SearchRequestMessage, opts ...grpc.CallOption) (*SearchResponseMessage, error) {
	out := new(SearchResponseMessage)
	err := c.cc.Invoke(ctx, "/ReadOnlyRegulationGRPC/SearchPargaraphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadOnlyRegulationGRPCServer is the server API for ReadOnlyRegulationGRPC service.
// All implementations must embed UnimplementedReadOnlyRegulationGRPCServer
// for forward compatibility
type ReadOnlyRegulationGRPCServer interface {
	GetRegulation(context.Context, *ID) (*Regulation, error)
	GetChapter(context.Context, *ID) (*Chapter, error)
	GetAllChapters(context.Context, *ID) (*Chapters, error)
	GetParagraphs(context.Context, *ID) (*Paragraphs, error)
	Search(context.Context, *SearchRequestMessage) (*SearchResponseMessage, error)
	SearchRegulations(context.Context, *SearchRequestMessage) (*SearchResponseMessage, error)
	SearchChapters(context.Context, *SearchRequestMessage) (*SearchResponseMessage, error)
	SearchPargaraphs(context.Context, *SearchRequestMessage) (*SearchResponseMessage, error)
	mustEmbedUnimplementedReadOnlyRegulationGRPCServer()
}

// UnimplementedReadOnlyRegulationGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedReadOnlyRegulationGRPCServer struct {
}

func (UnimplementedReadOnlyRegulationGRPCServer) GetRegulation(context.Context, *ID) (*Regulation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegulation not implemented")
}
func (UnimplementedReadOnlyRegulationGRPCServer) GetChapter(context.Context, *ID) (*Chapter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChapter not implemented")
}
func (UnimplementedReadOnlyRegulationGRPCServer) GetAllChapters(context.Context, *ID) (*Chapters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChapters not implemented")
}
func (UnimplementedReadOnlyRegulationGRPCServer) GetParagraphs(context.Context, *ID) (*Paragraphs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParagraphs not implemented")
}
func (UnimplementedReadOnlyRegulationGRPCServer) Search(context.Context, *SearchRequestMessage) (*SearchResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedReadOnlyRegulationGRPCServer) SearchRegulations(context.Context, *SearchRequestMessage) (*SearchResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRegulations not implemented")
}
func (UnimplementedReadOnlyRegulationGRPCServer) SearchChapters(context.Context, *SearchRequestMessage) (*SearchResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChapters not implemented")
}
func (UnimplementedReadOnlyRegulationGRPCServer) SearchPargaraphs(context.Context, *SearchRequestMessage) (*SearchResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPargaraphs not implemented")
}
func (UnimplementedReadOnlyRegulationGRPCServer) mustEmbedUnimplementedReadOnlyRegulationGRPCServer() {
}

// UnsafeReadOnlyRegulationGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadOnlyRegulationGRPCServer will
// result in compilation errors.
type UnsafeReadOnlyRegulationGRPCServer interface {
	mustEmbedUnimplementedReadOnlyRegulationGRPCServer()
}

func RegisterReadOnlyRegulationGRPCServer(s grpc.ServiceRegistrar, srv ReadOnlyRegulationGRPCServer) {
	s.RegisterService(&ReadOnlyRegulationGRPC_ServiceDesc, srv)
}

func _ReadOnlyRegulationGRPC_GetRegulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadOnlyRegulationGRPCServer).GetRegulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReadOnlyRegulationGRPC/GetRegulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadOnlyRegulationGRPCServer).GetRegulation(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadOnlyRegulationGRPC_GetChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadOnlyRegulationGRPCServer).GetChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReadOnlyRegulationGRPC/GetChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadOnlyRegulationGRPCServer).GetChapter(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadOnlyRegulationGRPC_GetAllChapters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadOnlyRegulationGRPCServer).GetAllChapters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReadOnlyRegulationGRPC/GetAllChapters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadOnlyRegulationGRPCServer).GetAllChapters(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadOnlyRegulationGRPC_GetParagraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadOnlyRegulationGRPCServer).GetParagraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReadOnlyRegulationGRPC/GetParagraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadOnlyRegulationGRPCServer).GetParagraphs(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadOnlyRegulationGRPC_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadOnlyRegulationGRPCServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReadOnlyRegulationGRPC/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadOnlyRegulationGRPCServer).Search(ctx, req.(*SearchRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadOnlyRegulationGRPC_SearchRegulations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadOnlyRegulationGRPCServer).SearchRegulations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReadOnlyRegulationGRPC/SearchRegulations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadOnlyRegulationGRPCServer).SearchRegulations(ctx, req.(*SearchRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadOnlyRegulationGRPC_SearchChapters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadOnlyRegulationGRPCServer).SearchChapters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReadOnlyRegulationGRPC/SearchChapters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadOnlyRegulationGRPCServer).SearchChapters(ctx, req.(*SearchRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadOnlyRegulationGRPC_SearchPargaraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadOnlyRegulationGRPCServer).SearchPargaraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReadOnlyRegulationGRPC/SearchPargaraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadOnlyRegulationGRPCServer).SearchPargaraphs(ctx, req.(*SearchRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ReadOnlyRegulationGRPC_ServiceDesc is the grpc.ServiceDesc for ReadOnlyRegulationGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReadOnlyRegulationGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReadOnlyRegulationGRPC",
	HandlerType: (*ReadOnlyRegulationGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegulation",
			Handler:    _ReadOnlyRegulationGRPC_GetRegulation_Handler,
		},
		{
			MethodName: "GetChapter",
			Handler:    _ReadOnlyRegulationGRPC_GetChapter_Handler,
		},
		{
			MethodName: "GetAllChapters",
			Handler:    _ReadOnlyRegulationGRPC_GetAllChapters_Handler,
		},
		{
			MethodName: "GetParagraphs",
			Handler:    _ReadOnlyRegulationGRPC_GetParagraphs_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _ReadOnlyRegulationGRPC_Search_Handler,
		},
		{
			MethodName: "SearchRegulations",
			Handler:    _ReadOnlyRegulationGRPC_SearchRegulations_Handler,
		},
		{
			MethodName: "SearchChapters",
			Handler:    _ReadOnlyRegulationGRPC_SearchChapters_Handler,
		},
		{
			MethodName: "SearchPargaraphs",
			Handler:    _ReadOnlyRegulationGRPC_SearchPargaraphs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
